// Generated by CoffeeScript 2.7.0
(function() {
  var HeyJson, WPAPI, fetchJson;

  fetchJson = require('./fetcher.js');

  WPAPI = require('./wpapi.js');

  HeyJson = class HeyJson {
    constructor(hey = {}) {
      this.runName = this.runName.bind(this);
      this.runFetchHangoverCompare = this.runFetchHangoverCompare.bind(this);
      this.twMakeTid = this.twMakeTid.bind(this);
      this.runFetch = this.runFetch.bind(this);
      this.runFetchWpPosts = this.runFetchWpPosts.bind(this);
      this.runMsg = this.runMsg.bind(this);
      this.hey = hey;
    }

    runName() {
      return this.hey;
    }

    async runFetchHangoverCompare(day1, day2) {
      var d1, d2, e, msg, wikipedia;
      try {
        wikipedia = async(day) => {
          var f, json, url, views;
          url = "https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia/all-access/all-agents/Philosophy/daily/" + day + "/" + day;
          f = (await fetchJson(url));
          json = JSON.parse(f);
          views = json.items[0].views;
          return views;
        };
        d1 = (await wikipedia(day1));
        d2 = (await wikipedia(day2));
        msg = "On " + day1 + " there were " + d1 + " views. On " + day2 + " there were " + d2 + " views. Interesting!";
        await this.twMakeTid("HangoverCompare", msg);
        return "success";
      } catch (error) {
        e = error;
        console.log(e);
        return "error in runFetchHangoverCompare method";
      }
    }

    twMakeTid(tid, text) {
      var body, e, title;
      console.log("running runMakeTid method");
      try {
        title = tid;
        body = text;
        return $tw.wiki.addTiddler({
          title: title,
          text: body,
          tags: "test"
        });
      } catch (error) {
        e = error;
        console.log(e);
        return "error making tiddler in runMakeTid method";
      }
    }

    async runFetch(url) {
      var e, f;
      try {
        f = (await fetchJson(url));
        return f;
      } catch (error) {
        e = error;
        console.log(e);
        return "error fetching json in runFetch method";
      }
    }

    async runFetchWpPosts(wpsite) {
      var e, endpoint, i, importer, len, namespace, post, postRoute, posts, site;
      endpoint = "https://" + wpsite + "/wp-json/";
      namespace = 'wp/v2';
      postRoute = '/posts/(?P<id>)';
      site = new WPAPI({
        endpoint: endpoint
      });
      site.post = site.registerRoute(namespace, postRoute);
      try {
        posts = (await site.post().perPage(5).page(1).get());
        // console.log(JSON.stringify(posts))
        importer = (x) => {
          var body, title, wplink, wptext, wptitle;
          wptitle = "import-" + x.id;
          wplink = x.link;
          wptext = JSON.stringify(x);
          title = x.title.rendered;
          body = x.content.rendered;
          return $tw.wiki.addTiddler({
            title: wptitle,
            text: wptext,
            type: "application/json",
            tags: "wpPost",
            wplink: wplink
          });
        };
        for (i = 0, len = posts.length; i < len; i++) {
          post = posts[i];
          await importer(post);
        }
        return "got posts";
      } catch (error) {
        e = error;
        console.log(e);
        return "error fetching wp posts in runFetchWpPosts method";
      }
    }

    runMsg() {
      var msg;
      msg = "hello there";
      return msg;
    }

  };

  module.exports = HeyJson;

}).call(this);
